#
# Copyright (c) 2023 Elbit Systems Ltd
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.20)

# Read project version from file
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/package.json" PACKAGE_JSON)
string(JSON CMAKE_PROJECT_NAME GET "${PACKAGE_JSON}" "name")
string(JSON CMAKE_PROJECT_VERSION GET "${PACKAGE_JSON}" "version")
string(JSON CMAKE_PROJECT_DESCRIPTION GET "${PACKAGE_JSON}" "description")

PROJECT(${CMAKE_PROJECT_NAME}
    LANGUAGES CXX
    VERSION ${CMAKE_PROJECT_VERSION}
    DESCRIPTION "${CMAKE_PROJECT_DESCRIPTION}")

# Create the library
SET(${CMAKE_PROJECT_NAME}_SOURCES
    "src/main.cpp"
   )

SET(${CMAKE_PROJECT_NAME}_PUBLIC_HEADERS
   )

SET(${CMAKE_PROJECT_NAME}_PRIVATE_HEADERS
)

add_executable(${CMAKE_PROJECT_NAME}
    ${${CMAKE_PROJECT_NAME}_SOURCES}
    ${${CMAKE_PROJECT_NAME}_PRIVATE_HEADERS}
    ${${CMAKE_PROJECT_NAME}_PUBLIC_HEADERS}
)

# Add conan dependencies
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/generators")


# Configure the library
target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC
    $<INSTALL_INTERFACE:include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

set_target_properties(${CMAKE_PROJECT_NAME}
    PROPERTIES
    CXX_STANDARD 23
    PUBLIC_HEADER "${${CMAKE_PROJECT_NAME}_PUBLIC_HEADERS}"
)

# Build documentation
include(GNUInstallDirs)


# Create loadable package
SET(INSTALL_POSTFIX "$<CONFIG>_$<$<EQUAL:4,${CMAKE_SIZEOF_VOID_P}>:Win32>$<$<EQUAL:8,${CMAKE_SIZEOF_VOID_P}>:Win64>")

install(TARGETS ${CMAKE_PROJECT_NAME}
  EXPORT "${CMAKE_PROJECT_NAME}-targets"
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}/${INSTALL_POSTFIX}"
)

install(FILES "$<TARGET_PDB_FILE:${PROJECT_NAME}>" DESTINATION "${CMAKE_INSTALL_BINDIR}/${INSTALL_POSTFIX}" OPTIONAL)
